{"cells":[{"cell_type":"markdown","metadata":{"id":"zIfJqr4KiNtw"},"source":["# Image similarity estimation using a Siamese Network with a contrastive loss\n","\n","**Author:** Mehdi<br>\n","**Date created:** 2021/05/06<br>\n","**Last modified:** 2021/05/06<br>\n","**Description:** Similarity learning using a siamese network trained with a contrastive loss."]},{"cell_type":"markdown","source":["Original Link: https://keras.io/examples/vision/siamese_contrastive/"],"metadata":{"id":"Il5mug1iioR4"}},{"cell_type":"markdown","metadata":{"id":"ObwV22mPiNt7"},"source":["## Introduction\n","\n","[Siamese Networks](https://en.wikipedia.org/wiki/Siamese_neural_network)\n","are neural networks which share weights between two or more sister networks,\n","each producing embedding vectors of its respective inputs.\n","\n","In supervised similarity learning, the networks are then trained to maximize the\n","contrast (distance) between embeddings of inputs of different classes, while minimizing the distance between\n","embeddings of similar classes, resulting in embedding spaces that reflect\n","the class segmentation of the training inputs."]},{"cell_type":"markdown","metadata":{"id":"qJYWahYbiNt8"},"source":["## Setup"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"64YNtZUeiNt9","executionInfo":{"status":"ok","timestamp":1662890650105,"user_tz":-270,"elapsed":2425,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}}},"outputs":[],"source":["import random\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","metadata":{"id":"tVkrNlwjiNt_"},"source":["## Hyperparameters"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"8hFYqKMyiNt_","executionInfo":{"status":"ok","timestamp":1662890650107,"user_tz":-270,"elapsed":19,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}}},"outputs":[],"source":["epochs = 10\n","batch_size = 16\n","margin = 1  # Margin for constrastive loss."]},{"cell_type":"markdown","metadata":{"id":"pvg35lJpiNuA"},"source":["## Load the MNIST dataset"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"7IBFBFpliNuB","executionInfo":{"status":"ok","timestamp":1662890650573,"user_tz":-270,"elapsed":482,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"fa793f35-f346-4fb1-d190-5e00e551a450"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","11501568/11490434 [==============================] - 0s 0us/step\n"]}],"source":["(x_train_val, y_train_val), (x_test, y_test) = keras.datasets.mnist.load_data()\n","\n","# Change the data type to a floating point format\n","x_train_val = x_train_val.astype(\"float32\")\n","x_test = x_test.astype(\"float32\")\n"]},{"cell_type":"markdown","metadata":{"id":"OU0aeYadiNuC"},"source":["## Define training and validation sets"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"TT0qYsIdiNuD","executionInfo":{"status":"ok","timestamp":1662890650575,"user_tz":-270,"elapsed":13,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}}},"outputs":[],"source":["# Keep 50% of train_val  in validation set\n","x_train, x_val = x_train_val[:30000], x_train_val[30000:]\n","y_train, y_val = y_train_val[:30000], y_train_val[30000:]\n","del x_train_val, y_train_val\n"]},{"cell_type":"markdown","metadata":{"id":"igxokNQsiNuE"},"source":["## Create pairs of images\n","\n","We will train the model to differentiate between digits of different classes. For\n","example, digit `0` needs to be differentiated from the rest of the\n","digits (`1` through `9`), digit `1` - from `0` and `2` through `9`, and so on.\n","To carry this out, we will select N random images from class A (for example,\n","for digit `0`) and pair them with N random images from another class B\n","(for example, for digit `1`). Then, we can repeat this process for all classes\n","of digits (until digit `9`). Once we have paired digit `0` with other digits,\n","we can repeat this process for the remaining classes for the rest of the digits\n","(from `1` until `9`)."]},{"cell_type":"code","execution_count":5,"metadata":{"id":"n5I9wtnCiNuE","executionInfo":{"status":"ok","timestamp":1662890651355,"user_tz":-270,"elapsed":790,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}}},"outputs":[],"source":["\n","def make_pairs(x, y):\n","    \"\"\"Creates a tuple containing image pairs with corresponding label.\n","\n","    Arguments:\n","        x: List containing images, each index in this list corresponds to one image.\n","        y: List containing labels, each label with datatype of `int`.\n","\n","    Returns:\n","        Tuple containing two numpy arrays as (pairs_of_samples, labels),\n","        where pairs_of_samples' shape is (2len(x), 2,n_features_dims) and\n","        labels are a binary array of shape (2len(x)).\n","    \"\"\"\n","\n","    num_classes = max(y) + 1\n","    digit_indices = [np.where(y == i)[0] for i in range(num_classes)]\n","\n","    pairs = []\n","    labels = []\n","\n","    for idx1 in range(len(x)):\n","        # add a matching example\n","        x1 = x[idx1]\n","        label1 = y[idx1]\n","        idx2 = random.choice(digit_indices[label1])\n","        x2 = x[idx2]\n","\n","        pairs += [[x1, x2]]\n","        labels += [1]\n","\n","        # add a non-matching example\n","        label2 = random.randint(0, num_classes - 1)\n","        while label2 == label1:\n","            label2 = random.randint(0, num_classes - 1)\n","\n","        idx2 = random.choice(digit_indices[label2])\n","        x2 = x[idx2]\n","\n","        pairs += [[x1, x2]]\n","        labels += [0]\n","\n","    return np.array(pairs), np.array(labels).astype(\"float32\")\n","\n","\n","# make train pairs\n","pairs_train, labels_train = make_pairs(x_train, y_train)\n","\n","# make validation pairs\n","pairs_val, labels_val = make_pairs(x_val, y_val)\n","\n","# make test pairs\n","pairs_test, labels_test = make_pairs(x_test, y_test)"]},{"cell_type":"markdown","metadata":{"id":"X67G2-nKiNuF"},"source":["We get:\n","\n","**pairs_train.shape = (60000, 2, 28, 28)**\n","\n","- We have 60,000 pairs\n","- Each pair contains 2 images\n","- Each image has shape `(28, 28)`"]},{"cell_type":"markdown","metadata":{"id":"6CPnshBSiNuG"},"source":["Split the training pairs"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"hp5LbCXsiNuG","executionInfo":{"status":"ok","timestamp":1662890651356,"user_tz":-270,"elapsed":7,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}}},"outputs":[],"source":["x_train_1 = pairs_train[:, 0]  # x_train_1.shape is (60000, 28, 28)\n","x_train_2 = pairs_train[:, 1]"]},{"cell_type":"markdown","metadata":{"id":"hb_HmUHAiNuG"},"source":["Split the validation pairs"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"UbERDMsRiNuH","executionInfo":{"status":"ok","timestamp":1662890651356,"user_tz":-270,"elapsed":7,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}}},"outputs":[],"source":["x_val_1 = pairs_val[:, 0]  # x_val_1.shape = (60000, 28, 28)\n","x_val_2 = pairs_val[:, 1]"]},{"cell_type":"markdown","metadata":{"id":"kNxZZVl0iNuH"},"source":["Split the test pairs"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"sPSUH14RiNuI","executionInfo":{"status":"ok","timestamp":1662890651357,"user_tz":-270,"elapsed":7,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}}},"outputs":[],"source":["x_test_1 = pairs_test[:, 0]  # x_test_1.shape = (20000, 28, 28)\n","x_test_2 = pairs_test[:, 1]\n"]},{"cell_type":"markdown","metadata":{"id":"JU52CouViNuI"},"source":["## Visualize pairs and their labels"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"ZIqau-YaiNuI","executionInfo":{"status":"ok","timestamp":1662890651357,"user_tz":-270,"elapsed":6,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}}},"outputs":[],"source":["\n","def visualize(pairs, labels, to_show=6, num_col=3, predictions=None, test=False):\n","    \"\"\"Creates a plot of pairs and labels, and prediction if it's test dataset.\n","\n","    Arguments:\n","        pairs: Numpy Array, of pairs to visualize, having shape\n","               (Number of pairs, 2, 28, 28).\n","        to_show: Int, number of examples to visualize (default is 6)\n","                `to_show` must be an integral multiple of `num_col`.\n","                 Otherwise it will be trimmed if it is greater than num_col,\n","                 and incremented if if it is less then num_col.\n","        num_col: Int, number of images in one row - (default is 3)\n","                 For test and train respectively, it should not exceed 3 and 7.\n","        predictions: Numpy Array of predictions with shape (to_show, 1) -\n","                     (default is None)\n","                     Must be passed when test=True.\n","        test: Boolean telling whether the dataset being visualized is\n","              train dataset or test dataset - (default False).\n","\n","    Returns:\n","        None.\n","    \"\"\"\n","\n","    # Define num_row\n","    # If to_show % num_col != 0\n","    #    trim to_show,\n","    #       to trim to_show limit num_row to the point where\n","    #       to_show % num_col == 0\n","    #\n","    # If to_show//num_col == 0\n","    #    then it means num_col is greater then to_show\n","    #    increment to_show\n","    #       to increment to_show set num_row to 1\n","    num_row = to_show // num_col if to_show // num_col != 0 else 1\n","\n","    # `to_show` must be an integral multiple of `num_col`\n","    #  we found num_row and we have num_col\n","    #  to increment or decrement to_show\n","    #  to make it integral multiple of `num_col`\n","    #  simply set it equal to num_row * num_col\n","    to_show = num_row * num_col\n","\n","    # Plot the images\n","    fig, axes = plt.subplots(num_row, num_col, figsize=(5, 5))\n","    for i in range(to_show):\n","\n","        # If the number of rows is 1, the axes array is one-dimensional\n","        if num_row == 1:\n","            ax = axes[i % num_col]\n","        else:\n","            ax = axes[i // num_col, i % num_col]\n","\n","        ax.imshow(tf.concat([pairs[i][0], pairs[i][1]], axis=1), cmap=\"gray\")\n","        ax.set_axis_off()\n","        if test:\n","            ax.set_title(\"True: {} | Pred: {:.5f}\".format(labels[i], predictions[i][0]))\n","        else:\n","            ax.set_title(\"Label: {}\".format(labels[i]))\n","    if test:\n","        plt.tight_layout(rect=(0, 0, 1.9, 1.9), w_pad=0.0)\n","    else:\n","        plt.tight_layout(rect=(0, 0, 1.5, 1.5))\n","    plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"aU0VHQLciNuK"},"source":["Inspect training pairs"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"-gPS1spQiNuK","colab":{"base_uri":"https://localhost:8080/","height":108},"executionInfo":{"status":"ok","timestamp":1662890651801,"user_tz":-270,"elapsed":450,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}},"outputId":"defb3241-f7ed-409c-9669-84ee41d6b7a6"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 360x360 with 4 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["visualize(pairs_train[:-1], labels_train[:-1], to_show=4, num_col=4)"]},{"cell_type":"markdown","metadata":{"id":"BeFMRQJjiNuL"},"source":["Inspect validation pairs"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"cvwRAt0YiNuL","colab":{"base_uri":"https://localhost:8080/","height":108},"executionInfo":{"status":"ok","timestamp":1662890651802,"user_tz":-270,"elapsed":16,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}},"outputId":"f2746ad1-3269-4607-b015-75da8827abe7"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 360x360 with 4 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["visualize(pairs_val[:-1], labels_val[:-1], to_show=4, num_col=4)"]},{"cell_type":"markdown","metadata":{"id":"W52c5lYjiNuL"},"source":["Inspect test pairs"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"VtisPQ18iNuL","colab":{"base_uri":"https://localhost:8080/","height":108},"executionInfo":{"status":"ok","timestamp":1662890652231,"user_tz":-270,"elapsed":442,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}},"outputId":"dcf5764f-b3b1-48be-dcfc-1cae809abe8e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 360x360 with 4 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["visualize(pairs_test[:-1], labels_test[:-1], to_show=4, num_col=4)"]},{"cell_type":"markdown","metadata":{"id":"apsFzdAbiNuM"},"source":["## Define the model\n","\n","There are be two input layers, each leading to its own network, which\n","produces embeddings. A `Lambda` layer then merges them using an\n","[Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) and the\n","merged output is fed to the final network."]},{"cell_type":"code","execution_count":13,"metadata":{"id":"EmXFDh51iNuM","executionInfo":{"status":"ok","timestamp":1662890652233,"user_tz":-270,"elapsed":27,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}}},"outputs":[],"source":["# Provided two tensors t1 and t2\n","# Euclidean distance = sqrt(sum(square(t1-t2)))\n","def euclidean_distance(vects):\n","    \"\"\"Find the Euclidean distance between two vectors.\n","\n","    Arguments:\n","        vects: List containing two tensors of same length.\n","\n","    Returns:\n","        Tensor containing euclidean distance\n","        (as floating point value) between vectors.\n","    \"\"\"\n","\n","    x, y = vects\n","    sum_square = tf.math.reduce_sum(tf.math.square(x - y), axis=1, keepdims=True)\n","    return tf.math.sqrt(tf.math.maximum(sum_square, tf.keras.backend.epsilon()))\n","\n","\n","input = layers.Input((28, 28, 1))\n","x = tf.keras.layers.BatchNormalization()(input)\n","x = layers.Conv2D(4, (5, 5), activation=\"tanh\")(x)\n","x = layers.AveragePooling2D(pool_size=(2, 2))(x)\n","x = layers.Conv2D(16, (5, 5), activation=\"tanh\")(x)\n","x = layers.AveragePooling2D(pool_size=(2, 2))(x)\n","x = layers.Flatten()(x)\n","\n","x = tf.keras.layers.BatchNormalization()(x)\n","x = layers.Dense(10, activation=\"tanh\")(x)\n","embedding_network = keras.Model(input, x)\n","\n","\n","input_1 = layers.Input((28, 28, 1))\n","input_2 = layers.Input((28, 28, 1))\n","\n","# As mentioned above, Siamese Network share weights between\n","# tower networks (sister networks). To allow this, we will use\n","# same embedding network for both tower networks.\n","tower_1 = embedding_network(input_1)\n","tower_2 = embedding_network(input_2)\n","\n","merge_layer = layers.Lambda(euclidean_distance)([tower_1, tower_2])\n","normal_layer = tf.keras.layers.BatchNormalization()(merge_layer)\n","output_layer = layers.Dense(1, activation=\"sigmoid\")(normal_layer)\n","siamese = keras.Model(inputs=[input_1, input_2], outputs=output_layer)\n"]},{"cell_type":"markdown","metadata":{"id":"EC_ml4JxiNuM"},"source":["## Define the constrastive Loss"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"O9lZPiiuiNuN","executionInfo":{"status":"ok","timestamp":1662891457673,"user_tz":-270,"elapsed":434,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}}},"outputs":[],"source":["\n","def loss(margin=1):\n","    \"\"\"Provides 'constrastive_loss' an enclosing scope with variable 'margin'.\n","\n","    Arguments:\n","        margin: Integer, defines the baseline for distance for which pairs\n","                should be classified as dissimilar. - (default is 1).\n","\n","    Returns:\n","        'constrastive_loss' function with data ('margin') attached.\n","    \"\"\"\n","\n","    # Contrastive loss = mean( (1-true_value) * square(prediction) +\n","    #                         true_value * square( max(margin-prediction, 0) ))\n","    def contrastive_loss(y_true, y_pred):\n","        \"\"\"Calculates the constrastive loss.\n","\n","        Arguments:\n","            y_true: List of labels, each label is of type float32.\n","            y_pred: List of predictions of same length as of y_true,\n","                    each label is of type float32.\n","\n","        Returns:\n","            A tensor containing constrastive loss as floating point value.\n","        \"\"\"\n","\n","        square_pred = tf.math.square(y_pred)\n","        margin_square = tf.math.square(tf.math.maximum(margin - (y_pred), 0))\n","        return tf.math.reduce_mean(\n","            (1 - y_true) * square_pred + (y_true) * margin_square\n","        )\n","\n","    return contrastive_loss\n"]},{"cell_type":"markdown","metadata":{"id":"6Pc7G16LiNuN"},"source":["## Compile the model with the contrastive loss"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"NuYxSkbciNuO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662891460991,"user_tz":-270,"elapsed":18,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}},"outputId":"9a347bd8-1e40-4b40-d8d1-d9b1d935f77b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_1\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_2 (InputLayer)           [(None, 28, 28, 1)]  0           []                               \n","                                                                                                  \n"," input_3 (InputLayer)           [(None, 28, 28, 1)]  0           []                               \n","                                                                                                  \n"," model (Functional)             (None, 10)           5318        ['input_2[0][0]',                \n","                                                                  'input_3[0][0]']                \n","                                                                                                  \n"," lambda (Lambda)                (None, 1)            0           ['model[0][0]',                  \n","                                                                  'model[1][0]']                  \n","                                                                                                  \n"," batch_normalization_2 (BatchNo  (None, 1)           4           ['lambda[0][0]']                 \n"," rmalization)                                                                                     \n","                                                                                                  \n"," dense_1 (Dense)                (None, 1)            2           ['batch_normalization_2[0][0]']  \n","                                                                                                  \n","==================================================================================================\n","Total params: 5,324\n","Trainable params: 4,808\n","Non-trainable params: 516\n","__________________________________________________________________________________________________\n"]}],"source":["siamese.compile(loss=loss(margin=margin), optimizer=\"RMSprop\", metrics=[\"accuracy\"])\n","siamese.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"UXgxLMdNiNuO"},"source":["## Train the model"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"OZrRd-9aiNuO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662891948973,"user_tz":-270,"elapsed":444552,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}},"outputId":"4580380b-23f1-4bb2-ff85-a34b30fcc5a9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","3750/3750 [==============================] - 47s 12ms/step - loss: 0.0935 - accuracy: 0.8796 - val_loss: 0.0370 - val_accuracy: 0.9527\n","Epoch 2/10\n","3750/3750 [==============================] - 49s 13ms/step - loss: 0.0502 - accuracy: 0.9338 - val_loss: 0.0265 - val_accuracy: 0.9658\n","Epoch 3/10\n","3750/3750 [==============================] - 44s 12ms/step - loss: 0.0413 - accuracy: 0.9458 - val_loss: 0.0231 - val_accuracy: 0.9699\n","Epoch 4/10\n","3750/3750 [==============================] - 44s 12ms/step - loss: 0.0372 - accuracy: 0.9518 - val_loss: 0.0220 - val_accuracy: 0.9716\n","Epoch 5/10\n","3750/3750 [==============================] - 43s 12ms/step - loss: 0.0336 - accuracy: 0.9570 - val_loss: 0.0209 - val_accuracy: 0.9732\n","Epoch 6/10\n","3750/3750 [==============================] - 43s 12ms/step - loss: 0.0318 - accuracy: 0.9580 - val_loss: 0.0201 - val_accuracy: 0.9743\n","Epoch 7/10\n","3750/3750 [==============================] - 43s 12ms/step - loss: 0.0313 - accuracy: 0.9597 - val_loss: 0.0167 - val_accuracy: 0.9786\n","Epoch 8/10\n","3750/3750 [==============================] - 43s 12ms/step - loss: 0.0295 - accuracy: 0.9626 - val_loss: 0.0170 - val_accuracy: 0.9779\n","Epoch 9/10\n","3750/3750 [==============================] - 43s 12ms/step - loss: 0.0280 - accuracy: 0.9643 - val_loss: 0.0186 - val_accuracy: 0.9755\n","Epoch 10/10\n","3750/3750 [==============================] - 44s 12ms/step - loss: 0.0280 - accuracy: 0.9638 - val_loss: 0.0154 - val_accuracy: 0.9802\n"]}],"source":["history = siamese.fit(\n","    [x_train_1, x_train_2],\n","    labels_train,\n","    validation_data=([x_val_1, x_val_2], labels_val),\n","    batch_size=batch_size,\n","    epochs=epochs,\n",")"]},{"cell_type":"markdown","metadata":{"id":"7Mu_luj2iNuO"},"source":["## Visualize results"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"eaUNIkRHiNuP","colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"status":"ok","timestamp":1662892006592,"user_tz":-270,"elapsed":484,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}},"outputId":"ff4e8017-81de-4198-c258-6ecaf6aa7d48"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["\n","def plt_metric(history, metric, title, has_valid=True):\n","    \"\"\"Plots the given 'metric' from 'history'.\n","\n","    Arguments:\n","        history: history attribute of History object returned from Model.fit.\n","        metric: Metric to plot, a string value present as key in 'history'.\n","        title: A string to be used as title of plot.\n","        has_valid: Boolean, true if valid data was passed to Model.fit else false.\n","\n","    Returns:\n","        None.\n","    \"\"\"\n","    plt.plot(history[metric])\n","    if has_valid:\n","        plt.plot(history[\"val_\" + metric])\n","        plt.legend([\"train\", \"validation\"], loc=\"upper left\")\n","    plt.title(title)\n","    plt.ylabel(metric)\n","    plt.xlabel(\"epoch\")\n","    plt.show()\n","\n","\n","# Plot the accuracy\n","plt_metric(history=history.history, metric=\"accuracy\", title=\"Model accuracy\")\n","\n","# Plot the constrastive loss\n","plt_metric(history=history.history, metric=\"loss\", title=\"Constrastive Loss\")"]},{"cell_type":"markdown","metadata":{"id":"NnuKHeZ9iNuP"},"source":["## Evaluate the model"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"hFAAFlG0iNuP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662892088305,"user_tz":-270,"elapsed":4879,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}},"outputId":"3a875d67-560a-4f8b-f1e0-e78eff46e0b1"},"outputs":[{"output_type":"stream","name":"stdout","text":["625/625 [==============================] - 5s 7ms/step - loss: 0.0138 - accuracy: 0.9822\n","test loss, test acc: [0.013772261328995228, 0.982200026512146]\n"]}],"source":["results = siamese.evaluate([x_test_1, x_test_2], labels_test)\n","print(\"test loss, test acc:\", results)"]},{"cell_type":"markdown","metadata":{"id":"ZUnfAJvpiNuQ"},"source":["## Visualize the predictions"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"4fzfxpwZiNuQ","colab":{"base_uri":"https://localhost:8080/","height":124},"executionInfo":{"status":"ok","timestamp":1662892103876,"user_tz":-270,"elapsed":4009,"user":{"displayName":"Soheil Koohi","userId":"04529429644948530935"}},"outputId":"63e07850-9ee6-435f-dc1b-3e7e00fc8e46"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 360x360 with 3 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["predictions = siamese.predict([x_test_1, x_test_2])\n","visualize(pairs_test, labels_test, to_show=3, predictions=predictions, test=True)"]},{"cell_type":"markdown","metadata":{"id":"fGofAEtGiNuQ"},"source":["**Example available on HuggingFace**\n","| Trained Model | Demo |\n","| :--: | :--: |\n","| [![Generic badge](https://img.shields.io/badge/%F0%9F%A4%97%20Model-Siamese%20Network-black.svg)](https://huggingface.co/keras-io/siamese-contrastive) | [![Generic badge](https://img.shields.io/badge/%F0%9F%A4%97%20Spaces-Siamese%20Network-black.svg)](https://huggingface.co/spaces/keras-io/siamese-contrastive) |"]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/siamese_contrastive.ipynb","timestamp":1661725116059}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"nbformat":4,"nbformat_minor":0}